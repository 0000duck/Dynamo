class Tuple4{    X : var;    Y : var;    Z : var;    H : var;        constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)    {        X = xValue;        Y = yValue;        Z = zValue;        H = hValue;            }}class Transform{    public C0 : var;     public C1 : var;     public C2 : var;     public C3 : var;             public constructor ByTuples(t0 : Tuple4, t1 : Tuple4, t2 : Tuple4, t3 : Tuple4)    {        C0 = t0;        C1 = t1;        C2 = t2;        C3 = t3;    }            public def ApplyTransform : Tuple4 (t : Tuple4)    {        return = Tuple4.XYZH(0.0, 0.0, 0.0, 0.0);    }            public def NativeMultiply : Transform(other : Transform)    {                      tc0 = ApplyTransform(other.C0); // Test member functions having same local var names        tc1 = ApplyTransform(other.C1);        tc2 = ApplyTransform(other.C2);        tc3 = ApplyTransform(other.C3);        return = Transform.ByTuples(tc0, tc1, tc2, tc3);    }        public def NativePreMultiply : Transform (other : Transform)    {             tc0 = other.ApplyTransform(C0); // Test member functions having same local var names        tc1 = other.ApplyTransform(C1);        tc2 = other.ApplyTransform(C2);        tc3 = other.ApplyTransform(C3);        return = Transform.ByTuples(tc0, tc1, tc2, tc3);    }}
